{"version":3,"sources":["components/svg-artboard.js","components/render-options.js","App.js","serviceWorker.js","index.js"],"names":["SVGArtboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sceneSize","sceneRadius","x","y","center","radius","stroke","index","react_default","a","createElement","cx","cy","r","strokeWidth","key","circles","output","stepSize","findCenter","i","currentStep","currentStroke","push","createCircle","createCircles","numberOfCircles","viewBoxSettings","concat","id","width","height","viewBox","Component","RenderOptions","clickHandlerCSSTransform","bind","assertThisInitialized","clickHandlerCSS3DTransform","clickHandlerViewBox","clickReset","SVGScene","initialViewBox","e","preventDefault","style","transform","_this2","interval","setInterval","negativeIncrement","string","axis","setAttribute","clearInterval","document","getElementById","getAttribute","onClick","className","App","svg_artboard","render_options","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb6a41f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SVGArtboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sceneSize = 1000;\n    this.sceneRadius = this.sceneSize / 2;\n  }\n  findCenter() {\n    return {\n      x: '50%',\n      y: '50%'\n    }\n  }\n  createCircle(center, radius, stroke, index) {\n    return <circle cx={center.x} cy={center.y} r={radius} strokeWidth={stroke} key={\"circle-\" + index}></circle>\n  }\n  createCircles(circles) {\n    let output = [];\n    let stepSize = this.sceneRadius / circles;\n    let center = this.findCenter();\n\n    for (let i = 0; i < circles; i++) {\n      let currentStep = stepSize * i;\n      let currentStroke = currentStep / 300;\n      output.push(\n        this.createCircle(center, currentStep, currentStroke, i)\n      );\n    }\n\n    return output;\n  }\n\n\n  render() {\n    let circles = this.createCircles(this.props.numberOfCircles);\n    let viewBoxSettings = `0 0 ${this.sceneSize} ${this.sceneSize}`;\n\n    return <svg id=\"svg-box\" width=\"100%\" height=\"100%\" x=\"0\" y=\"0\" viewBox={viewBoxSettings}>\n      {circles}\n    </svg>\n  }\n}\n\nexport default SVGArtboard;\n","import React, { Component } from 'react';\n\nclass RenderOptions extends Component {\n  constructor() {\n    super();\n\n    this.clickHandlerCSSTransform = this.clickHandlerCSSTransform.bind(this);\n    this.clickHandlerCSS3DTransform = this.clickHandlerCSS3DTransform.bind(this);\n    this.clickHandlerViewBox = this.clickHandlerViewBox.bind(this);\n    this.clickReset = this.clickReset.bind(this);\n    this.SVGScene = null;\n    this.initialViewBox = '';\n  }\n  clickHandlerCSSTransform(e) {\n    e.preventDefault();\n    this.SVGScene.style.transform = 'scale(100)';\n  }\n\n  clickHandlerCSS3DTransform(e) {\n    e.preventDefault();\n    this.SVGScene.style.transform = 'perspective(1000px) translateZ(900px)';\n  }\n\n  clickHandlerViewBox(e) {\n    e.preventDefault();\n    let steps = 50 * 3;\n    let currentStep = 0;\n    let increment = 1000 / steps;\n\n    let interval = setInterval(() => {\n      let axis = 0;\n      let negativeIncrement = 1000 - (currentStep * increment);\n\n      let string = axis + ' ' + axis + ' ' + negativeIncrement + ' ' + negativeIncrement;\n      this.SVGScene.setAttribute('viewBox', string);\n\n      if (++currentStep === steps)\n        clearInterval(interval);\n    }, 20);\n  }\n\n  clickReset(e) {\n    e.preventDefault();\n    this.SVGScene.style.transform = '';\n    this.SVGScene.setAttribute('viewBox', this.initialViewBox);\n  }\n\n  componentDidMount() {\n    this.SVGScene = document.getElementById('svg-box');\n    this.initialViewBox = this.SVGScene.getAttribute('viewBox');\n  }\n\n  render() {\n    return <div id=\"render-options\">\n      <div onClick={this.clickHandlerCSSTransform}>Zoom by CSS transform</div>\n      <div onClick={this.clickHandlerViewBox}>Zoom by viewBox</div>\n      <div onClick={this.clickHandlerCSS3DTransform}>Zoom by 3D Transform</div>\n      <div className=\"reset\" onClick={this.clickReset}>Reset</div>\n    </div>\n  }\n}\n\nexport default RenderOptions;\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport SVGArtboard from './components/svg-artboard.js';\nimport RenderOptions from './components/render-options.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <section id=\"svg-container\">\n          <SVGArtboard numberOfCircles=\"400\"></SVGArtboard>\n          <RenderOptions></RenderOptions>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}